---
import Badge from "@/components/Badge.astro";
import type { Tech, IconSource } from "@/content/techBadge.ts";
import { techList, singleColorIconSource, multiColorIconSource } from "@/content/techBadge.ts";

interface Props {
    name: string;
    coloredIcons?: boolean;
    simple?: boolean;
    dense?: boolean;
}

const { name: techName, coloredIcons = false, simple = false, dense = false } = Astro.props;

const {
    label,
    color: rawIconColor,
    fontColor: iconFontColor,
    link,
    icon: rawIcon,
}: Tech = techList.find((techObject) => techObject.name.includes(techName)) ?? {
    name: ["error"],
    label: "Error",
    color: "#ff0000",
};

function getIconName(sourceList: Readonly<Array<IconSource>>): string | undefined {
    if (rawIcon === undefined) {
        return undefined;
    }
    for (const source of sourceList) {
        if (rawIcon[source]) {
            return `${source}:${rawIcon[source]}`;
        }
    }
    return undefined;
}

// with fallback to other type of icon
const singleColorIcon = getIconName(singleColorIconSource) ?? getIconName(multiColorIconSource);
const multiColorIcon = getIconName(multiColorIconSource) ?? getIconName(singleColorIconSource);

const icon = coloredIcons ? multiColorIcon : singleColorIcon;
const iconColor = coloredIcons ? "" : rawIconColor;
---

{
    !simple && (
        <a class="primary-link" href={link} target="_blank">
            {icon ? (
                <Badge {icon} {iconColor} {iconFontColor} {dense} color="--tertiary-color">
                    {label}
                </Badge>
            ) : (
                <Badge color="--tertiary-color" {dense}>
                    {label}
                </Badge>
            )}
        </a>
    )
}

{
    simple && (
        <a class="primary-link" href={link} target="_blank">
            <Badge
                icon={singleColorIcon}
                iconColor="--tertiary-color"
                iconFontColor="--primary-color"
                border
                {dense}
            >
                {label}
            </Badge>
        </a>
    )
}

<style>
    @media print {
        a::after {
            content: "" !important;
        }
    }
</style>
