---
import type { HTMLAttributes } from 'astro/types';

interface Props extends HTMLAttributes<"button"> {
    class?: string,
    secondary?: boolean,
    wide?: boolean,
}

const { class: className, secondary = false, wide = false, ...rest } = Astro.props;
---

<button class:list={ [className, { secondary, wide }] } { ...rest } type="button">
    <slot />
</button>

<style>
button {
    color: var(--button-text-color);
    background-color: var(--button-color);

    padding-inline: 0.5em;

    border: none;
    border-radius: 0.25em;

    cursor: pointer;

    display: flex;
    flex: 1;
    min-width: fit-content;
    align-items: center;
    justify-content: center;
    gap: 0.25em;
}

button:hover,
button:focus {
    background-color: var(--button-focus-color);
}

button:active {
    background-color: var(--button-active-color);
}

button[disabled] {
    color: oklch(from var(--button-text-color) calc(l * 0.9) c h);
    background-color: oklch(from var(--button-color) calc(l * 0.8) c h);

    cursor: not-allowed;
}

@media print {
    button {
        color: var(--primary-color) !important;
        background-color: var(--bg-color) !important;

        border: 1px solid var(--primary-color);
    }
}

.wide {
    padding-inline: 2em;
}

.secondary {
    color: var(--button-secondary-text-color);
    background-color: var(--button-secondary-color);
}

.secondary:hover,
.secondary:focus {
    background-color: var(--button-secondary-focus-color);
}

.secondary:active {
    background-color: var(--button-secondary-active-color);
}

.secondary[disabled] {
    color: oklch(from var(--button-secondary-text-color) calc(l * 0.7) c h);
    background-color: oklch(from var(--button-secondary-color) calc(l * 0.9) c h);
}
</style>

